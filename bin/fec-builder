#! /usr/bin/env node

const yargs = require('yargs')
const _ = require('lodash')

const paths = require('../lib/utils/paths')
const buildEnv = require('../lib/utils/build-env')
const logger = require('../lib/utils/logger')
const prepare = require('../lib/prepare')
const clean = require('../lib/clean')
const generate = require('../lib/generate')
const upload = require('../lib/upload')
const serve = require('../lib/serve')

const options = {
  BUILD_ROOT: {
    alias: 'r',
    desc: 'Root path of your project (which contains build-config.json)',
    type: 'string',
    default: process.cwd()
  },
  BUILD_ENV: {
    alias: 'e',
    desc: 'Environment for build, one of [ development, production ]',
    type: 'string',
    default: 'development'
  },
  PORT: {
    alias: 'p',
    desc: 'Port for dev server',
    type: 'number',
    default: 80
  },
  BUILD_CONFIG_FILE: {
    alias: 'c',
    desc: 'Path of build config file. If provided, it will be used superior to build-config.json under BUILD_ROOT',
    type: 'string'
  },
  ENV_VARIABLES_FILE: {
    alias: 'f',
    desc: 'Target file path for env variables',
    type: 'string'
  },
  ISOMORPHIC_TOOLS_FILE: {
    desc: 'Target file path for isomorphic-tools.js for ssr',
    type: 'string'
  },
  verbose: {
    type: 'boolean',
    desc: 'Output more info',
    default: false
  }
}

const commands = {
  clean: {
    desc: 'Clean result file',
    handler: clean
  },
  generate: {
    desc: 'Generate result file',
    handler: generate
  },
  upload: {
    desc: 'Upload result file',
    handler: upload
  },
  build: {
    desc: 'Clean, generate & upload result file',
    handler() {
      return clean().then(generate).then(upload)
    }
  },
  serve: {
    isDefault: true,
    desc: 'Launch the dev server',
    handler(args) {
      return serve(args.PORT)
    }
  }
}

// define options
yargs.options(options)

// define commands
_.forEach(commands, ({ desc, handler, isDefault }, command) => {
  command = isDefault ? [command, '*'] : command
  yargs.command(command, desc, () => {}, args => {
    applyArgv(args)

    prepare().then(
      () => handler(args)
    ).catch(handleError)
  })
})

// enable --version
yargs.version()

// enable help (-h, --help, help)
yargs.help('h').alias('h', 'help')

// set locale
yargs.locale('en')

// run
const argv = yargs.argv

function applyArgv(argv) {
  if (argv.verbose) {
    logger.level = 'debug'
  }

  if (argv.BUILD_ROOT) {
    paths.setBuildRoot(argv.BUILD_ROOT)
  }

  if (argv.BUILD_CONFIG_FILE) {
    paths.setBuildConfigFilePath(argv.BUILD_CONFIG_FILE)
  }

  if (argv.ENV_VARIABLES_FILE) {
    paths.setEnvVariablesFilePath(argv.ENV_VARIABLES_FILE)
  }

  if (argv.ISOMORPHIC_TOOLS_FILE) {
    paths.setIsomorphicToolsFilePath(argv.ISOMORPHIC_TOOLS_FILE)
  }

  if (argv.BUILD_ENV) {
    buildEnv.set(argv.BUILD_ENV)
  }
}

function handleError(e) {
  if (Array.isArray(e)) {
    e.forEach(item => logger.error(item))
  } else {
    logger.error(e)
  }
  logger.fatal('encountered error, exit 1')
  process.exit(1)
}
